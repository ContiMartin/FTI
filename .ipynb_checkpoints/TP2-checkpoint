{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['if',\n",
       " '(DesplazamientoX',\n",
       " '==',\n",
       " '0',\n",
       " '&&',\n",
       " 'DesplazamientoY',\n",
       " '==',\n",
       " '1){Se',\n",
       " 'procede',\n",
       " 'a',\n",
       " 'bajar',\n",
       " 'el',\n",
       " 'personaje',\n",
       " '1',\n",
       " 'posición',\n",
       " 'else',\n",
       " 'if',\n",
       " '(DesplazamientoX',\n",
       " '==',\n",
       " '1',\n",
       " '&&',\n",
       " 'DesplazamientoY',\n",
       " '==',\n",
       " '0']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text1.split(\" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['',\n",
       " ' (DesplazamientoX == 0 && DesplazamientoY == 1){Se procede a bajar el personaje 1 posición else ',\n",
       " ' (DesplazamientoX == 1 && DesplazamientoY == 0']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text1.split(\"if\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\tinch\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "['if', '(', 'DesplazamientoX', '==', '0', '&', '&', 'DesplazamientoY', '==', '1', ')', '{', 'Se', 'procede', 'a', 'bajar', 'el', 'personaje', '1', 'posición', 'else', 'if', '(', 'DesplazamientoX', '==', '1', '&', '&', 'DesplazamientoY', '==', '0']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nodos:  5 ['IF', 'THEN', 'ELSE', 'ELSEIF', 'ENDIF']\n",
      "Enlaces:  4 [('IF', 'THEN'), ('IF', 'ELSE'), ('IF', 'ELSEIF'), ('ELSE', 'ENDIF')]\n",
      "palabra_clave\n",
      "palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "palabra_clave\n",
      "palabra_clave\n",
      "palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n",
      "No palabra_clave\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import nltk\n",
    "\n",
    "import os, sys\n",
    " \n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "nltk.download('punkt')\n",
    "\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "# text = input(\"Dígame su nombre: \")\n",
    "\n",
    "text1 = \"if (DesplazamientoX == 0 && DesplazamientoY == 1){Se procede a bajar el personaje 1 posición else if (DesplazamientoX == 1 && DesplazamientoY == 0\"\n",
    "\n",
    "tokens = word_tokenize(text1)\n",
    "print(tokens)\n",
    "\n",
    "palabras_clave = [\"endif\", \"else\", \"{\",\"if\", \"(\",]\n",
    "\n",
    "G=nx.Graph()\n",
    "\n",
    "G.add_nodes_from([\"IF\",\"THEN\",\"ELSE\",\"ELSEIF\" ,\"ENDIF\"])\n",
    " \n",
    "G.add_edge(\"IF\",\"THEN\")\n",
    " \n",
    "G.add_edge(\"IF\",\"ELSE\")\n",
    " \n",
    "G.add_edge(\"ELSE\",\"ENDIF\")\n",
    " \n",
    "G.add_edge(\"IF\",\"ELSEIF\")\n",
    " \n",
    "nx.draw_circular(G,node_size=4000,node_color='b')\n",
    "plt.show()\n",
    " \n",
    "print (\"Nodos: \", G.number_of_nodes(), G.nodes())\n",
    "print (\"Enlaces: \", G.number_of_edges(),G.edges())\n",
    " \n",
    "nx.draw(G)\n",
    "plt.savefig(\"networkx1.png\")\n",
    "\n",
    "for v in tokens:\n",
    "    if v not in palabras_clave:\n",
    "      print(\"No palabra_clave\")\n",
    "    else:\n",
    "      print(\"palabra_clave\")\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nodos:  5 ['IF', 'THEN', 'ELSE', 'ELSEIF', 'ENDIF']\n",
      "Enlaces:  4 [('IF', 'THEN'), ('IF', 'ELSE'), ('IF', 'ELSEIF'), ('ELSE', 'ENDIF')]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os, sys\n",
    " \n",
    "#Grafo no ponderado\n",
    " \n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "G=nx.Graph()\n",
    "\n",
    "G.add_nodes_from([\"IF\",\"THEN\",\"ELSE\",\"ELSEIF\" ,\"ENDIF\"])\n",
    " \n",
    "G.add_edge(\"IF\",\"THEN\")\n",
    " \n",
    "G.add_edge(\"IF\",\"ELSE\")\n",
    " \n",
    "G.add_edge(\"ELSE\",\"ENDIF\")\n",
    " \n",
    "G.add_edge(\"IF\",\"ELSEIF\")\n",
    " \n",
    "nx.draw_circular(G,node_size=4000,node_color='b')\n",
    "plt.show()\n",
    " \n",
    "print (\"Nodos: \", G.number_of_nodes(), G.nodes())\n",
    "print (\"Enlaces: \", G.number_of_edges(),G.edges())\n",
    " \n",
    "nx.draw(G)\n",
    "plt.savefig(\"networkx1.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import parser\n",
    "st = parser.expr('a + 5')\n",
    "code = st.compile('file.py')\n",
    "a = 5\n",
    "eval(code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import parser\n",
    "\n",
    "def load_suite(source_string):\n",
    "    st = parser.suite(source_string)\n",
    "    return st, st.compile()\n",
    "\n",
    "def load_expression(source_string):\n",
    "    st = parser.expr(source_string)\n",
    "    return st, st.compile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-110-a586250ec3e0>, line 26)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-110-a586250ec3e0>\"\u001b[1;36m, line \u001b[1;32m26\u001b[0m\n\u001b[1;33m    print \"\\n[Sentencia \" + str(numero_sentencia) + \"] -> \" + tokens[numero_sentencia], '\\n'\u001b[0m\n\u001b[1;37m                        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import codecs\n",
    "import win_unicode_console\n",
    "from nltk.tokenize import sent_tokenize\n",
    "from nltk.tokenize import word_tokenize\n",
    " \n",
    "#Utilizado para vizualizar caracteres correctamente en consola\n",
    "win_unicode_console.enable()\n",
    " \n",
    "#Abrimos el archivo\n",
    "archivo = codecs.open('texto.txt', 'r', encoding='utf-8')\n",
    "texto = \"\"\n",
    " \n",
    "#Almacenamos el texto en una variable\n",
    "for linea in archivo:\n",
    "    linea = linea.strip()\n",
    "    texto = texto + \" \" + linea\n",
    " \n",
    "#Realizamos el Tokenizing con Sent_Tokenize() a cada una de las sentencias del texto\n",
    "tokens = sent_tokenize(texto)\n",
    " \n",
    "#Preguntamos por el numero de sentencia a mostrar\n",
    "print (\"\\nEl texto contine {} sentencias.\\nComenzando de 0 hasta {}\\n\").format(len(tokens), len(tokens) - 1)\n",
    "numero_sentencia = input(\"Ingresa en numero de sentencia: \")\n",
    " \n",
    "if(numero_sentencia > 0 and numero_sentencia < len(tokens)):     \n",
    "    print \"\\n[Sentencia \" + str(numero_sentencia) + \"] -> \" + tokens[numero_sentencia], '\\n'\n",
    " \n",
    "    #Realizamos el Word_Tokenize() para cada una de las sentencias\n",
    "    word_tokens = []\n",
    "    for token in tokens:\n",
    "        word_tokens.append(word_tokenize(token))\n",
    " \n",
    "    #Se imprimen los tokens resutantes en pantalla\n",
    "    n = 0\n",
    "    for tok in word_tokens[numero_sentencia]:\n",
    "        print \"Token \" + str(n) + \" -> \" + tok\n",
    "        n = n + 1\n",
    " \n",
    "    print \"\\nTotal de tokens por palabras de la sentencia {} son: {} Tokens\".format(numero_sentencia, len(word_tokens[numero_sentencia]))\n",
    " \n",
    "    print \"\\nTotal de sentencias: {}\".format(len(tokens) - 1)\n",
    " \n",
    "else:\n",
    "    print \"\\n\\nNumero de sentencia no valido\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'StringIO'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-114-f5f353d8ad9e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mStringIO\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mtokenize\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mcodigo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'Given \"bloque de inicialización\" When \"bloque de condiciones\" Then \"bloque de comprobaciones\"'\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'StringIO'"
     ]
    }
   ],
   "source": [
    "import StringIO\n",
    "import tokenize\n",
    "\n",
    "codigo = 'Given \"bloque de inicialización\" When \"bloque de condiciones\" Then \"bloque de comprobaciones\"'\n",
    "\n",
    "mode = None\n",
    "\n",
    "for each in tokenize.generate_tokens(StringIO.StringIO(codigo).readline):\n",
    "    if each[0] == tokenize.NAME:\n",
    "        if each[1].capitalize() in ['Given', 'When', 'Then']:\n",
    "            mode = each[1].capitalize()\n",
    "            continue\n",
    "        process(each[0], mode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ply.yacc as yacc\n",
    "import os\n",
    "import codecs\n",
    "import re\n",
    "\n",
    "from analizadorLexico.py import tokens\n",
    "from sys import stdin\n",
    "\n",
    "precedence = (\n",
    "    (),\n",
    "    (),\n",
    "    )\n",
    "\n",
    "# resultado del analisis\n",
    "resultado_lexema = []\n",
    "\n",
    "reservada = (\n",
    "    # Palabras Reservadas\n",
    "    'INCLUDE',\n",
    "    'USING',\n",
    "    'NAMESPACE',\n",
    "    'STD',\n",
    "    'COUT',\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "<module '__main__'> is a built-in module",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-120-7c346086666f>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m    239\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    240\u001b[0m  \u001b[1;31m# instanciamos el analizador lexico\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 241\u001b[1;33m \u001b[0manalizador\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlex\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    242\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    243\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'__main__'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ply\\lex.py\u001b[0m in \u001b[0;36mlex\u001b[1;34m(module, object, debug, optimize, lextab, reflags, nowarn, outputdir, debuglog, errorlog)\u001b[0m\n\u001b[0;32m    906\u001b[0m     \u001b[0mlinfo\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_all\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    907\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0moptimize\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 908\u001b[1;33m         \u001b[1;32mif\u001b[0m \u001b[0mlinfo\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_all\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    909\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mSyntaxError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Can't build lexer\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    910\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ply\\lex.py\u001b[0m in \u001b[0;36mvalidate_all\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    577\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_tokens\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    578\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_literals\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 579\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_rules\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    580\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0merror\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    581\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ply\\lex.py\u001b[0m in \u001b[0;36mvalidate_rules\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    819\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    820\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodules\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 821\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    822\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    823\u001b[0m     \u001b[1;31m# -----------------------------------------------------------------------------\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\ply\\lex.py\u001b[0m in \u001b[0;36mvalidate_module\u001b[1;34m(self, module)\u001b[0m\n\u001b[0;32m    831\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvalidate_module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmodule\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    832\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 833\u001b[1;33m             \u001b[0mlines\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlinen\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minspect\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgetsourcelines\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodule\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    834\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mIOError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    835\u001b[0m             \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36mgetsourcelines\u001b[1;34m(object)\u001b[0m\n\u001b[0;32m    953\u001b[0m     raised if the source code cannot be retrieved.\"\"\"\n\u001b[0;32m    954\u001b[0m     \u001b[0mobject\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0munwrap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 955\u001b[1;33m     \u001b[0mlines\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlnum\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfindsource\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    956\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    957\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mismodule\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36mfindsource\u001b[1;34m(object)\u001b[0m\n\u001b[0;32m    766\u001b[0m     is raised if the source code cannot be retrieved.\"\"\"\n\u001b[0;32m    767\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 768\u001b[1;33m     \u001b[0mfile\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetsourcefile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    769\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mfile\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    770\u001b[0m         \u001b[1;31m# Invalidate cache if needed.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36mgetsourcefile\u001b[1;34m(object)\u001b[0m\n\u001b[0;32m    682\u001b[0m     \u001b[0mReturn\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mno\u001b[0m \u001b[0mway\u001b[0m \u001b[0mcan\u001b[0m \u001b[0mbe\u001b[0m \u001b[0midentified\u001b[0m \u001b[0mto\u001b[0m \u001b[0mget\u001b[0m \u001b[0mthe\u001b[0m \u001b[0msource\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    683\u001b[0m     \"\"\"\n\u001b[1;32m--> 684\u001b[1;33m     \u001b[0mfilename\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetfile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    685\u001b[0m     \u001b[0mall_bytecode_suffixes\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mimportlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmachinery\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDEBUG_BYTECODE_SUFFIXES\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    686\u001b[0m     \u001b[0mall_bytecode_suffixes\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mimportlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmachinery\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mOPTIMIZED_BYTECODE_SUFFIXES\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\lib\\inspect.py\u001b[0m in \u001b[0;36mgetfile\u001b[1;34m(object)\u001b[0m\n\u001b[0;32m    645\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'__file__'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    646\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__file__\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 647\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'{!r} is a built-in module'\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    648\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0misclass\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    649\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'__module__'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: <module '__main__'> is a built-in module"
     ]
    }
   ],
   "source": [
    "import ply.lex as lex\n",
    "\n",
    "# resultado del analisis\n",
    "resultado_lexema = []\n",
    "\n",
    "reservada = (\n",
    "    # Palabras Reservadas\n",
    "    'INCLUDE',\n",
    "    'USING',\n",
    "    'NAMESPACE',\n",
    "    'STD',\n",
    "    'COUT',\n",
    "    'CIN',\n",
    "   'GET',\n",
    "   'CADENA',\n",
    "  'RETURN',\n",
    "   'VOID',\n",
    "    'INT',\n",
    "    'ENDL',\n",
    ")\n",
    "tokens = reservada + (\n",
    "    'IDENTIFICADOR',\n",
    "    'ENTERO',\n",
    "    'ASIGNAR',\n",
    "\n",
    "    'SUMA',\n",
    "    'RESTA',\n",
    "    'MULT',\n",
    "    'DIV',\n",
    "    'POTENCIA',\n",
    "    'MODULO',\n",
    "\n",
    "   'MINUSMINUS',\n",
    "   'PLUSPLUS',\n",
    "\n",
    "    #Condiones\n",
    "   'SI',\n",
    "    'SINO',\n",
    "    #Ciclos\n",
    "   'MIENTRAS',\n",
    "   'PARA',\n",
    "    #logica\n",
    "    'AND',\n",
    "    'OR',\n",
    "    'NOT',\n",
    "    'MENORQUE',\n",
    "    'MENORIGUAL',\n",
    "    'MAYORQUE',\n",
    "    'MAYORIGUAL',\n",
    "    'IGUAL',\n",
    "    'DISTINTO',\n",
    "    # Symbolos\n",
    "    'NUMERAL',\n",
    "\n",
    "    'PARIZQ',\n",
    "    'PARDER',\n",
    "    'CORIZQ',\n",
    "    'CORDER',\n",
    "    'LLAIZQ',\n",
    "    'LLADER',\n",
    "    \n",
    "    # Otros\n",
    "    'PUNTOCOMA',\n",
    "    'COMA',\n",
    "    'COMDOB',\n",
    "    'MAYORDER', #>>\n",
    "    'MAYORIZQ', #<<\n",
    ")\n",
    "\n",
    "# Reglas de Expresiones Regualres para token de Contexto simple\n",
    "\n",
    "t_SUMA = r'\\+'\n",
    "t_RESTA = r'-'\n",
    "t_MINUSMINUS = r'\\-\\-'\n",
    "# t_PUNTO = r'\\.'\n",
    "t_MULT = r'\\*'\n",
    "t_DIV = r'/'\n",
    "t_MODULO = r'\\%'\n",
    "t_POTENCIA = r'(\\*{2} | \\^)'\n",
    "\n",
    "t_ASIGNAR = r'='\n",
    "# Expresiones Logicas\n",
    "t_AND = r'\\&\\&'\n",
    "t_OR = r'\\|{2}'\n",
    "t_NOT = r'\\!'\n",
    "t_MENORQUE = r'<'\n",
    "t_MAYORQUE = r'>'\n",
    "t_PUNTOCOMA = ';'\n",
    "t_COMA = r','\n",
    "t_PARIZQ = r'\\('\n",
    "t_PARDER = r'\\)'\n",
    "t_CORIZQ = r'\\['\n",
    "t_CORDER = r'\\]'\n",
    "t_LLAIZQ = r'{'\n",
    "t_LLADER = r'}'\n",
    "t_COMDOB = r'\\\"'\n",
    "\n",
    "\n",
    "\n",
    "def t_INCLUDE(t):\n",
    "    r'include'\n",
    "    return t\n",
    "\n",
    "def t_USING(t):\n",
    "    r'using'\n",
    "    return t\n",
    "\n",
    "def t_NAMESPACE(t):\n",
    "    r'namespace'\n",
    "    return t\n",
    "\n",
    "def t_STD(t):\n",
    "    r'std'\n",
    "    return t\n",
    "\n",
    "def t_COUT(t):\n",
    "    r'cout'\n",
    "    return t\n",
    "\n",
    "def t_CIN(t):\n",
    "    r'cin'\n",
    "    return t\n",
    "\n",
    "def t_GET(t):\n",
    "    r'get'\n",
    "    return t\n",
    "\n",
    "def t_ENDL(t):\n",
    "    r'endl'\n",
    "    return t\n",
    "\n",
    "def t_SINO(t):\n",
    "    r'else'\n",
    "    return t\n",
    "\n",
    "def t_SI(t):\n",
    "    r'if'\n",
    "    return t\n",
    "\n",
    "def t_RETURN(t):\n",
    "   r'return'\n",
    "   return t\n",
    "\n",
    "def t_VOID(t):\n",
    "   r'void'\n",
    "   return t\n",
    "\n",
    "def t_MIENTRAS(t):\n",
    "    r'while'\n",
    "    return t\n",
    "\n",
    "def t_PARA(t):\n",
    "    r'for'\n",
    "    return t\n",
    "\n",
    "def t_ENTERO(t):\n",
    "    r'\\d+'\n",
    "    t.value = int(t.value)\n",
    "    return t\n",
    "\n",
    "def t_IDENTIFICADOR(t):\n",
    "    r'\\w+(_\\d\\w)*'\n",
    "    return t\n",
    "\n",
    "def t_CADENA(t):\n",
    "   r'\\\"?(\\w+ \\ *\\w*\\d* \\ *)\\\"?'\n",
    "   return t\n",
    "\n",
    "def t_NUMERAL(t):\n",
    "    r'\\#'\n",
    "    return t\n",
    "\n",
    "def t_PLUSPLUS(t):\n",
    "    r'\\+\\+'\n",
    "    return t\n",
    "\n",
    "def t_MENORIGUAL(t):\n",
    "    r'<='\n",
    "    return t\n",
    "\n",
    "def t_MAYORIGUAL(t):\n",
    "    r'>='\n",
    "    return t\n",
    "\n",
    "def t_IGUAL(t):\n",
    "    r'=='\n",
    "    return t\n",
    "\n",
    "def t_MAYORDER(t):\n",
    "    r'<<'\n",
    "    return t\n",
    "\n",
    "def t_MAYORIZQ(t):\n",
    "    r'>>'\n",
    "    return t\n",
    "\n",
    "def t_DISTINTO(t):\n",
    "    r'!='\n",
    "    return t\n",
    "\n",
    "def t_newline(t):\n",
    "    r'\\n+'\n",
    "    t.lexer.lineno += len(t.value)\n",
    "\n",
    "def t_comments(t):\n",
    "    r'/\\*(.|\\n)*?\\*/'\n",
    "    t.lexer.lineno += t.value.count('\\n')\n",
    "    print(\"Comentario de multiple linea\")\n",
    "\n",
    "def t_comments_ONELine(t):\n",
    "     r'\\/\\/(.)*\\n'\n",
    "     t.lexer.lineno += 1\n",
    "     print(\"Comentario de una linea\")\n",
    "t_ignore =' \\t'\n",
    "\n",
    "def t_error( t):\n",
    "    global resultado_lexema\n",
    "    estado = \"** Token no valido en la Linea {:4} Valor {:16} Posicion {:4}\".format(str(t.lineno), str(t.value),\n",
    "                                                                      str(t.lexpos))\n",
    "    resultado_lexema.append(estado)\n",
    "    t.lexer.skip(1)\n",
    "\n",
    "# Prueba de ingreso\n",
    "def prueba(data):\n",
    "    global resultado_lexema\n",
    "\n",
    "    analizador = lex.lex()\n",
    "    analizador.input(data)\n",
    "\n",
    "    resultado_lexema.clear()\n",
    "    while True:\n",
    "        tok = analizador.token()\n",
    "        if not tok:\n",
    "            break\n",
    "        # print(\"lexema de \"+tok.type+\" valor \"+tok.value+\" linea \"tok.lineno)\n",
    "        estado = \"Linea {:4} Tipo {:16} Valor {:16} Posicion {:4}\".format(str(tok.lineno),str(tok.type) ,str(tok.value), str(tok.lexpos) )\n",
    "        resultado_lexema.append(estado)\n",
    "    return resultado_lexema\n",
    "\n",
    " # instanciamos el analizador lexico\n",
    "analizador = lex.lex()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    while True:\n",
    "        data = input(\"ingrese: \")\n",
    "        prueba(data)\n",
    "        print(resultado_lexema)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-93a7fd1c5fce>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-1-93a7fd1c5fce>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    <IF> if <condicion>\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "<IF> -- if <condicion> { <BLOQUES> <S> \n",
    "<S> -- } | } <ELSEIF>\n",
    "<ELSEIF> -- <CONDICION> | { <BLOQUES> } <ELSEIF> | ELSE | { <BLOQUES> }\n",
    "<CONDICION> -- <CONDICION> | <VAR>\n",
    "<VAR> -- ( <VAR> <OPE-ARIT> <VAR>) | <VAR> <OPE-COND> <VAR>| unNumero\n",
    "<OPE-ARIT> -- + | - | | | | |\n",
    "<OPE-COND> -- \n",
    "<BLOQUE> -- IF | WHILE\n",
    "<WAHILE> while <CONDICION> { <BLOQUE> }  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
